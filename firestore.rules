rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // User profiles - users can read all profiles but only edit their own
    match /users/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == userId;
      
      // Allow access to user's trades subcollection
      match /trades/{tradeId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated();
      }
    }
    
    // Items collection - public read, authenticated write
    match /items/{itemId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        (resource.data.ownerId == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Market prices collection - anyone can read, authenticated users can create,
    // creator can update/delete their own prices, anyone can execute trades
    match /marketPrices/{priceId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // Trades collection - anyone can read, authenticated users can create trades
    match /trades/{tradeId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if false;
    }
    
    // Game stats - public read, admin write
    match /gameStats/{statId} {
      allow read: if true;
      allow write: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Default deny all rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 