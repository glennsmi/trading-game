rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles - users can read all profiles but only edit their own
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Items collection - public read, authenticated write
    match /items/{itemId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        (resource.data.ownerId == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Market prices collection - anyone can read, authenticated users can create,
    // only the creator can update or delete their own prices
    match /marketPrices/{priceId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Trades collection - involved users can read/write their own trades
    match /trades/{tradeId} {
      allow read: if request.auth != null && 
        (resource.data.buyerId == request.auth.uid || 
         resource.data.sellerId == request.auth.uid);
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (resource.data.buyerId == request.auth.uid || 
         resource.data.sellerId == request.auth.uid);
      allow delete: if request.auth != null &&
        (resource.data.buyerId == request.auth.uid && resource.data.status == "pending");
    }
    
    // Game stats - public read, admin write
    match /gameStats/{statId} {
      allow read: if true;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Default deny all rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 